<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.euserprovider.dao.AddressMinuteDao">

    <sql id="display">
        id,code,t_address_id,t_user_id,concreteness_address,creation_time,modify_time,modify_id,modify_id_type,del
    </sql>

    <resultMap id="AddressMinuteMap" type="com.example.emodeldao.user.po.TAddressMinute">
        <id column="id" property="id"/>
        <result column="concreteness_address" property="concretenessAddress" />
        <result column="creation_time" property="creationTime" />
        <result column="modify_time" property="modifyTime" />
        <result column="modify_id" property="modifyId" />
        <result column="modify_id_type" property="modifyIdType" />
        <result column="code" property="code" />
        <result column="del" property="del" />
        <!--不管是一对一还是一对多，对象属性必须放在最后否则语法报错-->
        <association property="tAddressId"
                     column="t_address_id"
                     javaType="com.example.emodeldao.user.po.TAddress"
                     select="com.example.euserprovider.dao.AddressDao.findById">
        </association>
        <association property="userId"
                     column="t_user_id"
                     javaType="com.example.emodeldao.user.po.User"
                     select="com.example.euserprovider.dao.UserDao.findById">
        </association>
    </resultMap>

    <!--查询,通过地址表和用户表id-->
    <select id="findByAddressIdOrUserId" parameterType="java.util.Map" resultMap="AddressMinuteMap">
        select <include refid="display"/> from `t_address_minute`
        where true

        <if test="TAddressMinute.tAddressId!=null">
            <if test="TAddressMinute.tAddressId.id!=null and TAddressMinute.tAddressId.id!=''">
            and `t_address_id` = #{TAddressMinute.tAddressId.id}
            </if>
        </if>

        <if test="TAddressMinute.userId!=null">
            <if test="TAddressMinute.userId.id!=null and TAddressMinute.userId.id!=''">
            and `t_user_id` = #{TAddressMinute.userId.id}
            </if>
        </if>

        LIMIT #{page,jdbcType=INTEGER},#{length,jdbcType=INTEGER}
    </select>

    <!--添加一条地址信息,添加时要获取addressId的数据，和userId的数据，如果，没有要先添加-->
    <insert id="insertAddressMinute" parameterType="com.example.emodeldao.user.po.TAddressMinute">
        INSERT INTO `e-commerce`.`t_address_minute`
        (`t_address_id`, `concreteness_address`, `t_user_id`,`creation_time`,
         `modify_id_type`,`modify_id`)
        VALUES
         (#{tAddressId.id}, #{concretenessAddress}, #{userId.id},#{creationTime},
         #{modifyIdType},#{modifyId});
    </insert>

    <!--修改，修改用户，是通过用户外键id去修改用户，
        修改，地址信息的逻辑为，用修改的信息去地址表查询，如果有数据，更换外键指向
        如果没有地址添加信息，指向新的外键
    -->
    <update id="updateAddressMuinteByUserId" parameterType="com.example.emodeldao.user.po.TAddressMinute">
        UPDATE `e-commerce`.`t_address_minute`
        SET
        <if test="tAddressId!=null and tAddressId!=''">
            <if test="tAddressId.id!=null and tAddressId.id!=''">
            `t_address_id`=#{tAddressId.id},
            </if>
        </if>
        `concreteness_address`=#{concretenessAddress},
        `modify_time`=#{modifyTime},
        `modify_id`=#{modifyId},
        `modify_id_type`=#{modifyIdType}
        WHERE  `code`=#{code};
    </update>

    <!--删除功能先不提供，因为这里没有日志处理，一旦有人故意或者恶意删除数据将无法回复-->



    <!--但是可以先给用户提供一个为删除的功能-->
    <update id="del" parameterType="com.example.emodeldao.user.po.TAddressMinute">
        UPDATE `e-commerce`.`t_address_minute`
        SET
        `del`=#{del},
        `modify_time`=#{modifyTime},
        `modify_id`=#{modifyId},
        `modify_id_type`=#{modifyIdType}
        WHERE
        `id`=#{id};
    </update>


</mapper>